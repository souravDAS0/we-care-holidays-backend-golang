{
    "swagger": "2.0",
    "info": {
        "description": "API Server for WeCare Holidays applications",
        "title": "WeCare Holidays API",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "url": "http://www.wecareholidays.com/support",
            "email": "support@wecareholidays.com"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "1.0"
    },
    "host": "localhost:8080",
    "basePath": "/api/v1",
    "paths": {
        "/locations": {
            "get": {
                "description": "Get all locations with pagination and filtering",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "locations"
                ],
                "summary": "List locations",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "maximum": 100,
                        "type": "integer",
                        "default": 10,
                        "description": "Items per page",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by name (partial match, case-insensitive)",
                        "name": "name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by organization type (exact match)",
                        "name": "type",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by state (partial match, case-insensitive)",
                        "name": "state",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by country (partial match, case-insensitive)",
                        "name": "country",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "Filter by tags (exact match, any)",
                        "name": "tags",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "Filter by aliases (exact match, any)",
                        "name": "aliases",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "default": false,
                        "description": "Include soft-deleted locations",
                        "name": "includeDeleted",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response with paginated locations",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/models.SwaggerStandardResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/dto.PaginatedLocationsResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.SwaggerErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.SwaggerErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new location with the provided data",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "locations"
                ],
                "summary": "Create a new location",
                "parameters": [
                    {
                        "description": "Location data",
                        "name": "location",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.CreateLocationDto"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/models.SwaggerStandardResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/entity.Location"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.SwaggerErrorResponse"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/models.SwaggerErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.SwaggerErrorResponse"
                        }
                    }
                }
            }
        },
        "/locations/bulk-delete": {
            "delete": {
                "description": "Soft-delete multiple locations by their IDs",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "locations"
                ],
                "summary": "Delete multiple locations",
                "parameters": [
                    {
                        "description": "IDs to delete",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.BulkDeleteDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/models.SwaggerStandardResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/models.BulkDeleteResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.SwaggerErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.SwaggerErrorResponse"
                        }
                    }
                }
            }
        },
        "/locations/bulk-restore": {
            "post": {
                "description": "Restore multiple soft-deleted locations by their IDs",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "locations"
                ],
                "summary": "Restore multiple deleted locations",
                "parameters": [
                    {
                        "description": "IDs to restore",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.BulkDeleteDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/models.SwaggerStandardResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/models.BulkRestoreResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.SwaggerErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.SwaggerErrorResponse"
                        }
                    }
                }
            }
        },
        "/locations/{id}": {
            "get": {
                "description": "Get single location by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "locations"
                ],
                "summary": "Get location by ID",
                "parameters": [
                    {
                        "type": "string",
                        "example": "\"6824886e6b180b753cea43e9\"",
                        "description": "Location ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/models.SwaggerStandardResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/entity.Location"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.SwaggerErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/models.SwaggerErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.SwaggerErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "description": "Update a location by ID with provided data",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "locations"
                ],
                "summary": "Update an existing location",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Location ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Location data to update",
                        "name": "location",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.UpdateLocationDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/models.SwaggerStandardResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/entity.Location"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.SwaggerErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/models.SwaggerErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.SwaggerErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "description": "Soft-delete a location by ID (marks as deleted but keeps in database)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "locations"
                ],
                "summary": "Delete a location",
                "parameters": [
                    {
                        "type": "string",
                        "example": "\"6824886e6b180b753cea43e9\"",
                        "description": "Location ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/models.SwaggerStandardResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "object"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.SwaggerErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/models.SwaggerErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.SwaggerErrorResponse"
                        }
                    }
                }
            }
        },
        "/locations/{id}/hard-delete": {
            "delete": {
                "description": "Permanently delete a location by ID (removes it from the database)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "locations"
                ],
                "summary": "Permanently delete a location",
                "parameters": [
                    {
                        "type": "string",
                        "example": "\"6824886e6b180b753cea43e9\"",
                        "description": "Location ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/models.SwaggerStandardResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "object"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.SwaggerErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/models.SwaggerErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.SwaggerErrorResponse"
                        }
                    }
                }
            }
        },
        "/locations/{id}/restore": {
            "post": {
                "description": "Restore a soft-deleted location by ID (clears the deletedAt timestamp)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "locations"
                ],
                "summary": "Restore a deleted location",
                "parameters": [
                    {
                        "type": "string",
                        "example": "\"6824886e6b180b753cea43e9\"",
                        "description": "Location ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/models.SwaggerStandardResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/entity.Location"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.SwaggerErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/models.SwaggerErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.SwaggerErrorResponse"
                        }
                    }
                }
            }
        },
        "/organizations": {
            "get": {
                "description": "Get all organizations with pagination and filtering",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "organizations"
                ],
                "summary": "List organizations",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "maximum": 100,
                        "type": "integer",
                        "default": 10,
                        "description": "Items per page",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by name (partial match, case-insensitive)",
                        "name": "name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by slug (partial match, case-insensitive)",
                        "name": "slug",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by organization type (exact match)",
                        "name": "type",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by status (exact match)",
                        "name": "status",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by email (partial match, case-insensitive)",
                        "name": "email",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by phone number (partial match, case-insensitive)",
                        "name": "phone",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by website (partial match, case-insensitive)",
                        "name": "website",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by city (partial match, case-insensitive)",
                        "name": "city",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by state (partial match, case-insensitive)",
                        "name": "state",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by country (partial match, case-insensitive)",
                        "name": "country",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "default": false,
                        "description": "Include soft-deleted organizations",
                        "name": "includeDeleted",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response with paginated organizations",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/models.SwaggerStandardResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/dto.PaginatedOrganizationsResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.SwaggerErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.SwaggerErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new organization with the provided data",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "organizations"
                ],
                "summary": "Create a new organization",
                "parameters": [
                    {
                        "description": "Organization data",
                        "name": "organization",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.CreateOrganizationDto"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/models.SwaggerStandardResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/entity.Organization"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.SwaggerErrorResponse"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/models.SwaggerErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.SwaggerErrorResponse"
                        }
                    }
                }
            }
        },
        "/organizations/bulk-delete": {
            "delete": {
                "description": "Soft-delete multiple organizations by their IDs",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "organizations"
                ],
                "summary": "Delete multiple organizations",
                "parameters": [
                    {
                        "description": "IDs to delete",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.BulkDeleteDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/models.SwaggerStandardResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/models.BulkDeleteResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.SwaggerErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.SwaggerErrorResponse"
                        }
                    }
                }
            }
        },
        "/organizations/bulk-restore": {
            "post": {
                "description": "Restore multiple soft-deleted organizations by their IDs",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "organizations"
                ],
                "summary": "Restore multiple deleted organizations",
                "parameters": [
                    {
                        "description": "IDs to restore",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.BulkDeleteDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/models.SwaggerStandardResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/models.BulkRestoreResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.SwaggerErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.SwaggerErrorResponse"
                        }
                    }
                }
            }
        },
        "/organizations/{id}": {
            "get": {
                "description": "Get single organization by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "organizations"
                ],
                "summary": "Get organization by ID",
                "parameters": [
                    {
                        "type": "string",
                        "example": "\"6824886e6b180b753cea43e9\"",
                        "description": "Organization ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/models.SwaggerStandardResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/entity.Organization"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.SwaggerErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/models.SwaggerErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.SwaggerErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "description": "Update an existing organization by ID with partial data",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "organizations"
                ],
                "summary": "Update an organization",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Organization ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Organization data to update",
                        "name": "organization",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.UpdateOrganizationDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/models.SwaggerStandardResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/entity.Organization"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.SwaggerErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/models.SwaggerErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.SwaggerErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "description": "Soft-delete an organization by ID (marks as deleted but keeps in database)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "organizations"
                ],
                "summary": "Delete an organization",
                "parameters": [
                    {
                        "type": "string",
                        "example": "\"6824886e6b180b753cea43e9\"",
                        "description": "Organization ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/models.SwaggerStandardResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "object"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.SwaggerErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/models.SwaggerErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.SwaggerErrorResponse"
                        }
                    }
                }
            }
        },
        "/organizations/{id}/hard-delete": {
            "delete": {
                "description": "Hard-delete an organization by ID (permanently removes from database)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "organizations"
                ],
                "summary": "Permanently delete an organization",
                "parameters": [
                    {
                        "type": "string",
                        "example": "\"6824886e6b180b753cea43e9\"",
                        "description": "Organization ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/models.SwaggerStandardResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "object"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.SwaggerErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/models.SwaggerErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.SwaggerErrorResponse"
                        }
                    }
                }
            }
        },
        "/organizations/{id}/logo": {
            "post": {
                "description": "Upload a new logo for an organization and update its record",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "organizations"
                ],
                "summary": "Upload organization logo",
                "parameters": [
                    {
                        "type": "string",
                        "example": "\"6824886e6b180b753cea43e9\"",
                        "description": "Organization ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "file",
                        "description": "Logo image file",
                        "name": "file",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Updated organization",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/models.SwaggerStandardResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/entity.Organization"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/models.SwaggerErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Organization not found",
                        "schema": {
                            "$ref": "#/definitions/models.SwaggerErrorResponse"
                        }
                    },
                    "413": {
                        "description": "File too large",
                        "schema": {
                            "$ref": "#/definitions/models.SwaggerErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/models.SwaggerErrorResponse"
                        }
                    }
                }
            }
        },
        "/organizations/{id}/restore": {
            "post": {
                "description": "Restore a soft-deleted organization",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "organizations"
                ],
                "summary": "Restore a deleted organization",
                "parameters": [
                    {
                        "type": "string",
                        "example": "\"6824886e6b180b753cea43e9\"",
                        "description": "Organization ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/models.SwaggerStandardResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/entity.Organization"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.SwaggerErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/models.SwaggerErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.SwaggerErrorResponse"
                        }
                    }
                }
            }
        },
        "/organizations/{id}/status": {
            "put": {
                "description": "Update the status of an organization",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "organizations"
                ],
                "summary": "Update organization status",
                "parameters": [
                    {
                        "type": "string",
                        "example": "\"6824886e6b180b753cea43e9\"",
                        "description": "Organization ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/models.SwaggerStandardResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/entity.Organization"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.SwaggerErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/models.SwaggerErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.SwaggerErrorResponse"
                        }
                    }
                }
            }
        },
        "/permissions": {
            "get": {
                "description": "Get all permissions with pagination and filtering",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "permissions"
                ],
                "summary": "List permissions",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "maximum": 100,
                        "type": "integer",
                        "default": 10,
                        "description": "Items per page",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by name (partial match, case-insensitive)",
                        "name": "name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by description (partial match, case-insensitive)",
                        "name": "description",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by resource (exact match)",
                        "name": "resource",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by action (exact match)",
                        "name": "action",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "default": false,
                        "description": "Include soft-deleted permissions",
                        "name": "includeDeleted",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response with paginated permissions",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/models.SwaggerStandardResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/dto.PaginatedPermissionsResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.SwaggerErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.SwaggerErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Creates a new permission with the provided details",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "permissions"
                ],
                "summary": "Create a new permission",
                "parameters": [
                    {
                        "description": "Permission creation data",
                        "name": "permission",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.CreatePermissionDto"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/models.SwaggerStandardResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/entity.Permission"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.SwaggerErrorResponse"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/models.SwaggerErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.SwaggerErrorResponse"
                        }
                    }
                }
            }
        },
        "/permissions/{id}": {
            "get": {
                "description": "Retrieves a single permission by its unique identifier",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "permissions"
                ],
                "summary": "Get a permission by ID",
                "parameters": [
                    {
                        "type": "string",
                        "format": "objectid",
                        "example": "\"6824886e6b180b753cea43e9\"",
                        "description": "Permission ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/models.SwaggerStandardResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/entity.Permission"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.SwaggerErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/models.SwaggerErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.SwaggerErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "description": "Updates an existing permission with the provided details",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "permissions"
                ],
                "summary": "Update an existing permission",
                "parameters": [
                    {
                        "type": "string",
                        "format": "objectid",
                        "description": "Permission ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Permission update data",
                        "name": "permission",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.UpdatePermissionDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/models.SwaggerStandardResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/entity.Permission"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.SwaggerErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/models.SwaggerErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.SwaggerErrorResponse"
                        }
                    }
                }
            }
        },
        "/permissions/{id}/hard-delete": {
            "delete": {
                "description": "Permanently deletes a permission from the database (cannot be undone)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "permissions"
                ],
                "summary": "Permanently delete a permission",
                "parameters": [
                    {
                        "type": "string",
                        "format": "objectid",
                        "description": "Permission ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/models.SwaggerStandardResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "object"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.SwaggerErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/models.SwaggerErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.SwaggerErrorResponse"
                        }
                    }
                }
            }
        },
        "/roles": {
            "get": {
                "description": "Get all roles with pagination and filtering",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "roles"
                ],
                "summary": "List roles",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "maximum": 100,
                        "type": "integer",
                        "default": 20,
                        "description": "Items per page",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by name (partial match, case-insensitive)",
                        "name": "name",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "Filter roles that have permissions (true) or no permissions (false)",
                        "name": "hasPermissions",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "If true, role must have ALL specified permissions; if false, role must have ANY",
                        "name": "hasAllPermissions",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Search in role name and description (case-insensitive)",
                        "name": "searchTerm",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "default": false,
                        "description": "Include soft-deleted roles",
                        "name": "includeDeleted",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Filter by exact permission count",
                        "name": "permissionCount",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Filter by minimum permission count",
                        "name": "minPermissionCount",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Filter by maximum permission count",
                        "name": "maxPermissionCount",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response with paginated roles",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/models.SwaggerStandardResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/dto.PaginatedRolesResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.SwaggerErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.SwaggerErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new role with the provided data",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "roles"
                ],
                "summary": "Create a new role",
                "parameters": [
                    {
                        "description": "Role data",
                        "name": "role",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.CreateRoleDto"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/models.SwaggerStandardResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/entity.Role"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.SwaggerErrorResponse"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/models.SwaggerErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.SwaggerErrorResponse"
                        }
                    }
                }
            }
        },
        "/roles/bulk-delete": {
            "delete": {
                "description": "Soft-delete multiple roles by their IDs",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "roles"
                ],
                "summary": "Delete multiple roles",
                "parameters": [
                    {
                        "description": "IDs to delete",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.BulkDeleteDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/models.SwaggerStandardResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/models.BulkDeleteResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.SwaggerErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.SwaggerErrorResponse"
                        }
                    }
                }
            }
        },
        "/roles/bulk-restore": {
            "post": {
                "description": "Restore multiple soft-deleted roles by their IDs",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "roles"
                ],
                "summary": "Restore multiple deleted roles",
                "parameters": [
                    {
                        "description": "IDs to restore",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.BulkDeleteDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/models.SwaggerStandardResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/models.BulkRestoreResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.SwaggerErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.SwaggerErrorResponse"
                        }
                    }
                }
            }
        },
        "/roles/{id}": {
            "get": {
                "description": "Get single role by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "roles"
                ],
                "summary": "Get role by ID",
                "parameters": [
                    {
                        "type": "string",
                        "example": "\"6824886e6b180b753cea43e9\"",
                        "description": "role ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/models.SwaggerStandardResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/entity.Role"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.SwaggerErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/models.SwaggerErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.SwaggerErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "description": "Update a role by ID with provided data",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "roles"
                ],
                "summary": "Update an existing role",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Role ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Role data to update",
                        "name": "role",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.UpdateRoleDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/models.SwaggerStandardResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/entity.Role"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.SwaggerErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/models.SwaggerErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.SwaggerErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "description": "Soft-delete a role by ID (marks as deleted but keeps in database)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "roles"
                ],
                "summary": "Delete a role",
                "parameters": [
                    {
                        "type": "string",
                        "example": "\"6824886e6b180b753cea43e9\"",
                        "description": "Role ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/models.SwaggerStandardResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "object"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.SwaggerErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/models.SwaggerErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.SwaggerErrorResponse"
                        }
                    }
                }
            }
        },
        "/roles/{id}/hard-delete": {
            "delete": {
                "description": "Permanently delete a role by ID (removes it from the database)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "roles"
                ],
                "summary": "Permanently delete a role",
                "parameters": [
                    {
                        "type": "string",
                        "example": "\"6824886e6b180b753cea43e9\"",
                        "description": "Role ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/models.SwaggerStandardResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "object"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.SwaggerErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/models.SwaggerErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.SwaggerErrorResponse"
                        }
                    }
                }
            }
        },
        "/roles/{id}/restore": {
            "post": {
                "description": "Restore a soft-deleted role by ID (clears the deletedAt timestamp)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "roles"
                ],
                "summary": "Restore a deleted role",
                "parameters": [
                    {
                        "type": "string",
                        "example": "\"6824886e6b180b753cea43e9\"",
                        "description": "Role ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/models.SwaggerStandardResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/entity.Role"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.SwaggerErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/models.SwaggerErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.SwaggerErrorResponse"
                        }
                    }
                }
            }
        },
        "/users": {
            "get": {
                "description": "Get all users with pagination and filtering",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "List users",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "maximum": 100,
                        "type": "integer",
                        "default": 10,
                        "description": "Items per page",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by full name (partial match, case-insensitive)",
                        "name": "fullName",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by email (partial match, case-insensitive)",
                        "name": "email",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by phone number (partial match, case-insensitive)",
                        "name": "phone",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by status (exact match)",
                        "name": "status",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by role ID (exact match)",
                        "name": "roleId",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by organization ID (exact match)",
                        "name": "organizationId",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Search across name, email, and phone",
                        "name": "search",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "default": false,
                        "description": "Include soft-deleted users",
                        "name": "includeDeleted",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/models.SwaggerStandardResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/dto.PaginatedUsersResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.SwaggerErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.SwaggerErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new user with the provided data",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Create a new user",
                "parameters": [
                    {
                        "description": "User data",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.CreateUserDto"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/models.SwaggerStandardResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/entity.User"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.SwaggerErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/models.SwaggerErrorResponse"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/models.SwaggerErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.SwaggerErrorResponse"
                        }
                    }
                }
            }
        },
        "/users/bulk-delete": {
            "delete": {
                "description": "Soft-delete multiple users by their IDs",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Delete multiple users",
                "parameters": [
                    {
                        "description": "IDs to delete",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.BulkDeleteDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/models.SwaggerStandardResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/models.BulkDeleteResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.SwaggerErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.SwaggerErrorResponse"
                        }
                    }
                }
            }
        },
        "/users/bulk-restore": {
            "post": {
                "description": "Restore multiple soft-deleted users by their IDs",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Restore multiple deleted users",
                "parameters": [
                    {
                        "description": "IDs to restore",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.BulkDeleteDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/models.SwaggerStandardResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/models.BulkRestoreResponse"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.SwaggerErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.SwaggerErrorResponse"
                        }
                    }
                }
            }
        },
        "/users/{id}": {
            "get": {
                "description": "Get single user by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Get user by ID",
                "parameters": [
                    {
                        "type": "string",
                        "example": "\"507f1f77bcf86cd799439011\"",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/models.SwaggerStandardResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/entity.User"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.SwaggerErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/models.SwaggerErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.SwaggerErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "description": "Update an existing user by ID with partial data",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Update a user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "User data to update",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.UpdateUserDto"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/models.SwaggerStandardResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/entity.User"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.SwaggerErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/models.SwaggerErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.SwaggerErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "description": "Soft-delete a user by ID (marks as deleted but keeps in database)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Delete a user",
                "parameters": [
                    {
                        "type": "string",
                        "example": "\"507f1f77bcf86cd799439011\"",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/models.SwaggerStandardResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "object"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.SwaggerErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/models.SwaggerErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.SwaggerErrorResponse"
                        }
                    }
                }
            }
        },
        "/users/{id}/hard-delete": {
            "delete": {
                "description": "Hard-delete a user by ID (permanently removes from database)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Permanently delete a user",
                "parameters": [
                    {
                        "type": "string",
                        "example": "\"507f1f77bcf86cd799439011\"",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/models.SwaggerStandardResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "object"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.SwaggerErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/models.SwaggerErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.SwaggerErrorResponse"
                        }
                    }
                }
            }
        },
        "/users/{id}/profile-photo": {
            "post": {
                "description": "Upload a new profile photo for an user and update its record",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Upload user profile photo",
                "parameters": [
                    {
                        "type": "string",
                        "example": "\"6824886e6b180b753cea43e9\"",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "file",
                        "description": "Logo image file",
                        "name": "file",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Updated user",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/models.SwaggerStandardResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/entity.User"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/models.SwaggerErrorResponse"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "$ref": "#/definitions/models.SwaggerErrorResponse"
                        }
                    },
                    "413": {
                        "description": "File too large",
                        "schema": {
                            "$ref": "#/definitions/models.SwaggerErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Server error",
                        "schema": {
                            "$ref": "#/definitions/models.SwaggerErrorResponse"
                        }
                    }
                }
            }
        },
        "/users/{id}/restore": {
            "post": {
                "description": "Restore a soft-deleted user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Restore a deleted user",
                "parameters": [
                    {
                        "type": "string",
                        "example": "\"507f1f77bcf86cd799439011\"",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/models.SwaggerStandardResponse"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/entity.User"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.SwaggerErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/models.SwaggerErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.SwaggerErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "dto.AddressDto": {
            "type": "object",
            "properties": {
                "city": {
                    "type": "string",
                    "example": "Siliguri"
                },
                "country": {
                    "type": "string",
                    "example": "India"
                },
                "pincode": {
                    "type": "string",
                    "example": "734001"
                },
                "state": {
                    "type": "string",
                    "example": "West Bengal"
                },
                "street": {
                    "type": "string",
                    "example": "123 Main Street, Building A"
                }
            }
        },
        "dto.CoordinatesDto": {
            "type": "object",
            "properties": {
                "lat": {
                    "type": "number",
                    "example": 26.727
                },
                "lng": {
                    "type": "number",
                    "example": 88.395
                }
            }
        },
        "dto.CreateLocationDto": {
            "type": "object",
            "required": [
                "country",
                "district",
                "name",
                "pincode",
                "state",
                "type"
            ],
            "properties": {
                "aliases": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "coordinates": {
                    "description": "Optional fields",
                    "allOf": [
                        {
                            "$ref": "#/definitions/dto.CoordinatesDto"
                        }
                    ]
                },
                "country": {
                    "type": "string",
                    "example": "India"
                },
                "description": {
                    "type": "string"
                },
                "district": {
                    "type": "string",
                    "example": "Darjeeling"
                },
                "geojson": {},
                "mediaUrls": {
                    "$ref": "#/definitions/dto.MediaUrlsDto"
                },
                "name": {
                    "description": "Required fields",
                    "type": "string",
                    "example": "Siliguri"
                },
                "pincode": {
                    "type": "string",
                    "example": "734001"
                },
                "state": {
                    "type": "string",
                    "example": "West Bengal"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "type": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/dto.LocationType"
                        }
                    ],
                    "example": "city"
                }
            }
        },
        "dto.CreateOrganizationDto": {
            "type": "object",
            "required": [
                "email",
                "name",
                "type"
            ],
            "properties": {
                "address": {
                    "$ref": "#/definitions/dto.AddressDto"
                },
                "email": {
                    "type": "string",
                    "example": "contact@wecareholidays.com"
                },
                "logo": {
                    "type": "string",
                    "example": "https://storage.example.com/logos/wecare.png"
                },
                "name": {
                    "description": "Required fields",
                    "type": "string",
                    "example": "WeCare Holidays"
                },
                "phone": {
                    "type": "string",
                    "example": "+91 1234567890"
                },
                "slug": {
                    "description": "Optional fields",
                    "type": "string",
                    "example": "wecare-holidays"
                },
                "status": {
                    "description": "If not provided, defaults to \"Pending\"",
                    "type": "string",
                    "example": "Approved"
                },
                "taxIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "['GST123456'",
                        " 'PAN1234567']"
                    ]
                },
                "type": {
                    "description": "SUPPLIER, TRAVEL_AGENT, PLATFORM",
                    "type": "string",
                    "example": "SUPPLIER"
                },
                "website": {
                    "type": "string",
                    "example": "https://www.wecareholidays.com"
                }
            }
        },
        "dto.CreatePermissionDto": {
            "type": "object",
            "required": [
                "action",
                "resource"
            ],
            "properties": {
                "action": {
                    "type": "string",
                    "example": "read"
                },
                "resource": {
                    "type": "string",
                    "example": "organizations"
                }
            }
        },
        "dto.CreateRoleDto": {
            "type": "object",
            "required": [
                "description",
                "name"
            ],
            "properties": {
                "description": {
                    "type": "string",
                    "example": "Administrator role with full access"
                },
                "name": {
                    "description": "Required fields",
                    "type": "string",
                    "example": "Admin"
                },
                "permissions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "507f1f77bcf86cd799439011",
                        " 507f1f77bcf86cd799439012"
                    ]
                },
                "scope": {
                    "description": "Optional fields",
                    "type": "string",
                    "example": "organizations"
                }
            }
        },
        "dto.CreateUserDto": {
            "type": "object",
            "required": [
                "email",
                "fullName",
                "roleId"
            ],
            "properties": {
                "email": {
                    "type": "string",
                    "example": "john@example.com"
                },
                "fullName": {
                    "type": "string",
                    "example": "John Doe"
                },
                "organizationId": {
                    "type": "string",
                    "example": "507f1f77bcf86cd799439012"
                },
                "phone": {
                    "type": "string",
                    "example": "+919876543210"
                },
                "profilePhotoUrl": {
                    "type": "string",
                    "example": "https://example.com/photo.jpg"
                },
                "roleId": {
                    "type": "string",
                    "example": "507f1f77bcf86cd799439011"
                },
                "status": {
                    "type": "string",
                    "example": "Active"
                }
            }
        },
        "dto.LocationType": {
            "type": "string",
            "enum": [
                "city",
                "scenic_spot",
                "transit_hub",
                "district",
                "village",
                "region"
            ],
            "x-enum-varnames": [
                "City",
                "ScenicSpot",
                "TransitHub",
                "District",
                "Village",
                "Region"
            ]
        },
        "dto.MediaUrlsDto": {
            "type": "object",
            "properties": {
                "photos": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "videos": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "dto.PaginatedLocationsResponse": {
            "type": "object",
            "properties": {
                "includeDeleted": {
                    "type": "boolean",
                    "example": false
                },
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/entity.Location"
                    }
                },
                "limit": {
                    "type": "integer",
                    "example": 10
                },
                "page": {
                    "type": "integer",
                    "example": 1
                },
                "total": {
                    "type": "integer",
                    "example": 2
                },
                "totalPages": {
                    "type": "integer",
                    "example": 1
                }
            }
        },
        "dto.PaginatedOrganizationsResponse": {
            "type": "object",
            "properties": {
                "includeDeleted": {
                    "type": "boolean",
                    "example": false
                },
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/entity.Organization"
                    }
                },
                "limit": {
                    "type": "integer",
                    "example": 10
                },
                "page": {
                    "type": "integer",
                    "example": 1
                },
                "total": {
                    "type": "integer",
                    "example": 2
                },
                "totalPages": {
                    "type": "integer",
                    "example": 1
                }
            }
        },
        "dto.PaginatedPermissionsResponse": {
            "type": "object",
            "properties": {
                "includeDeleted": {
                    "type": "boolean",
                    "example": false
                },
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/entity.Permission"
                    }
                },
                "limit": {
                    "type": "integer",
                    "example": 10
                },
                "page": {
                    "type": "integer",
                    "example": 1
                },
                "total": {
                    "type": "integer",
                    "example": 2
                },
                "totalPages": {
                    "type": "integer",
                    "example": 1
                }
            }
        },
        "dto.PaginatedRolesResponse": {
            "type": "object",
            "properties": {
                "includeDeleted": {
                    "type": "boolean",
                    "example": false
                },
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/entity.Role"
                    }
                },
                "limit": {
                    "type": "integer",
                    "example": 10
                },
                "page": {
                    "type": "integer",
                    "example": 1
                },
                "total": {
                    "type": "integer",
                    "example": 2
                },
                "totalPages": {
                    "type": "integer",
                    "example": 1
                }
            }
        },
        "dto.PaginatedUsersResponse": {
            "type": "object",
            "properties": {
                "includeDeleted": {
                    "type": "boolean",
                    "example": false
                },
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/entity.User"
                    }
                },
                "limit": {
                    "type": "integer",
                    "example": 10
                },
                "page": {
                    "type": "integer",
                    "example": 1
                },
                "total": {
                    "type": "integer",
                    "example": 2
                },
                "totalPages": {
                    "type": "integer",
                    "example": 1
                }
            }
        },
        "dto.UpdateLocationDto": {
            "type": "object",
            "properties": {
                "aliases": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "coordinates": {
                    "$ref": "#/definitions/dto.CoordinatesDto"
                },
                "country": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "district": {
                    "type": "string"
                },
                "geojson": {},
                "mediaUrls": {
                    "$ref": "#/definitions/dto.MediaUrlsDto"
                },
                "name": {
                    "type": "string"
                },
                "pincode": {
                    "type": "string"
                },
                "state": {
                    "type": "string"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "type": {
                    "$ref": "#/definitions/dto.LocationType"
                }
            }
        },
        "dto.UpdateOrganizationDto": {
            "type": "object",
            "properties": {
                "address": {
                    "$ref": "#/definitions/dto.AddressDto"
                },
                "email": {
                    "type": "string"
                },
                "logo": {
                    "type": "string"
                },
                "name": {
                    "description": "All fields are pointers to distinguish between nil (not provided) and empty values",
                    "type": "string"
                },
                "phone": {
                    "type": "string"
                },
                "slug": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "taxIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "type": {
                    "type": "string"
                },
                "website": {
                    "type": "string"
                }
            }
        },
        "dto.UpdatePermissionDto": {
            "type": "object",
            "properties": {
                "action": {
                    "type": "string"
                },
                "resource": {
                    "type": "string"
                }
            }
        },
        "dto.UpdateRoleDto": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "name": {
                    "description": "All fields are pointers to distinguish between nil (not provided) and empty values",
                    "type": "string"
                },
                "permissions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "dto.UpdateUserDto": {
            "type": "object",
            "properties": {
                "emails": {
                    "description": "Array of email strings",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "fullName": {
                    "type": "string"
                },
                "organizationId": {
                    "type": "string"
                },
                "phones": {
                    "description": "Array of phone strings",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "profilePhotoUrl": {
                    "type": "string"
                },
                "roleId": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "entity.Address": {
            "description": "Physical address information",
            "type": "object",
            "properties": {
                "city": {
                    "description": "City name",
                    "type": "string",
                    "example": "Siliguri"
                },
                "country": {
                    "description": "Country name",
                    "type": "string",
                    "example": "India"
                },
                "pincode": {
                    "description": "Postal/ZIP code",
                    "type": "string",
                    "example": "734001"
                },
                "state": {
                    "description": "State or province",
                    "type": "string",
                    "example": "West Bengal"
                },
                "street": {
                    "description": "Street address including building/apartment",
                    "type": "string",
                    "example": "123 Main Street, Building A"
                }
            }
        },
        "entity.AuditTrail": {
            "type": "object",
            "properties": {
                "lastLoginAt": {
                    "type": "string"
                },
                "lastLoginDevice": {
                    "type": "string"
                },
                "lastLoginIp": {
                    "type": "string"
                }
            }
        },
        "entity.Coordinates": {
            "type": "object",
            "properties": {
                "lat": {
                    "type": "number"
                },
                "lng": {
                    "type": "number"
                }
            }
        },
        "entity.Email": {
            "type": "object",
            "properties": {
                "email": {
                    "description": "Email address",
                    "type": "string"
                },
                "isVerified": {
                    "description": "Verification status",
                    "type": "boolean"
                }
            }
        },
        "entity.Location": {
            "type": "object",
            "properties": {
                "aliases": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "coordinates": {
                    "$ref": "#/definitions/entity.Coordinates"
                },
                "country": {
                    "type": "string"
                },
                "createdAt": {
                    "type": "string"
                },
                "createdBy": {
                    "type": "string"
                },
                "deletedAt": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "district": {
                    "type": "string"
                },
                "geojson": {},
                "id": {
                    "type": "string"
                },
                "mediaUrls": {
                    "$ref": "#/definitions/entity.MediaURLs"
                },
                "name": {
                    "type": "string"
                },
                "pincode": {
                    "type": "string"
                },
                "state": {
                    "type": "string"
                },
                "tags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "type": {
                    "description": "city | scenic_spot | ...",
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                }
            }
        },
        "entity.MediaURLs": {
            "type": "object",
            "properties": {
                "photos": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "videos": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "entity.Organization": {
            "description": "Organization entity representing clients, suppliers, or travel agents",
            "type": "object",
            "properties": {
                "address": {
                    "description": "Physical address",
                    "allOf": [
                        {
                            "$ref": "#/definitions/entity.Address"
                        }
                    ]
                },
                "createdAt": {
                    "description": "Creation timestamp",
                    "type": "string"
                },
                "deletedAt": {
                    "description": "Soft delete timestamp",
                    "type": "string"
                },
                "email": {
                    "description": "Primary contact email",
                    "type": "string",
                    "example": "contact@wecareholidays.com"
                },
                "id": {
                    "description": "Unique identifier for the organization",
                    "type": "string",
                    "example": "5f8d0c1b7ea3f0d0f3c8e1b9"
                },
                "logo": {
                    "description": "URL to organization logo",
                    "type": "string",
                    "example": "https://storage.example.com/logos/wecare.png"
                },
                "name": {
                    "description": "Organization name",
                    "type": "string",
                    "example": "WeCare Holidays"
                },
                "phone": {
                    "description": "Contact phone number",
                    "type": "string",
                    "example": "+91 1234567890"
                },
                "slug": {
                    "description": "URL-friendly version of name",
                    "type": "string",
                    "example": "wecare-holidays"
                },
                "status": {
                    "description": "Current status (Pending, Approved, Suspended, Archived)",
                    "type": "string",
                    "example": "Approved"
                },
                "taxIds": {
                    "description": "Tax identification numbers",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "['GST123456'",
                        " 'PAN1234567']"
                    ]
                },
                "type": {
                    "description": "Organization type (SUPPLIER, TRAVEL_AGENT, PLATFORM)",
                    "type": "string",
                    "example": "SUPPLIER"
                },
                "updatedAt": {
                    "description": "Last update timestamp",
                    "type": "string"
                },
                "website": {
                    "description": "Organization website URL",
                    "type": "string",
                    "example": "https://www.wecareholidays.com"
                }
            }
        },
        "entity.Permission": {
            "type": "object",
            "properties": {
                "_id": {
                    "type": "string"
                },
                "action": {
                    "description": "e.g., \"read\", \"create\"",
                    "allOf": [
                        {
                            "$ref": "#/definitions/entity.PermissionAction"
                        }
                    ]
                },
                "createdAt": {
                    "type": "string"
                },
                "description": {
                    "description": "Human-readable description",
                    "type": "string"
                },
                "resource": {
                    "description": "e.g., \"users\", \"roles\"",
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                }
            }
        },
        "entity.PermissionAction": {
            "type": "string",
            "enum": [
                "read",
                "write",
                "create",
                "update",
                "delete"
            ],
            "x-enum-varnames": [
                "PermissionActionRead",
                "PermissionActionWrite",
                "PermissionActionCreate",
                "PermissionActionUpdate",
                "PermissionActionDelete"
            ]
        },
        "entity.Phone": {
            "type": "object",
            "properties": {
                "isVerified": {
                    "description": "Verification status",
                    "type": "boolean"
                },
                "number": {
                    "description": "Phone number (E.164)",
                    "type": "string"
                }
            }
        },
        "entity.Role": {
            "type": "object",
            "properties": {
                "_id": {
                    "type": "string"
                },
                "createdAt": {
                    "type": "string"
                },
                "createdBy": {
                    "description": "User ID who created this role",
                    "type": "string"
                },
                "deletedAt": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "isSystem": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "permissions": {
                    "description": "Permission IDs",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "scope": {
                    "$ref": "#/definitions/entity.RoleScope"
                },
                "updatedAt": {
                    "type": "string"
                }
            }
        },
        "entity.RoleScope": {
            "type": "string",
            "enum": [
                "global",
                "organization",
                "self"
            ],
            "x-enum-comments": {
                "RoleScopeGlobal": "Can access all data across all organizations",
                "RoleScopeOrganization": "Can access data within their organization only",
                "RoleScopeSelf": "Can access only their own data"
            },
            "x-enum-varnames": [
                "RoleScopeGlobal",
                "RoleScopeOrganization",
                "RoleScopeSelf"
            ]
        },
        "entity.User": {
            "type": "object",
            "properties": {
                "_id": {
                    "type": "string"
                },
                "auditTrail": {
                    "$ref": "#/definitions/entity.AuditTrail"
                },
                "createdAt": {
                    "type": "string"
                },
                "deletedAt": {
                    "type": "string"
                },
                "emails": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/entity.Email"
                    }
                },
                "fullName": {
                    "type": "string"
                },
                "organizationId": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "phones": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/entity.Phone"
                    }
                },
                "profilePhotoUrl": {
                    "type": "string"
                },
                "role": {
                    "description": "For convenience",
                    "type": "string"
                },
                "roleId": {
                    "type": "string"
                },
                "status": {
                    "$ref": "#/definitions/entity.UserStatus"
                },
                "updatedAt": {
                    "type": "string"
                }
            }
        },
        "entity.UserStatus": {
            "type": "string",
            "enum": [
                "Invited",
                "Active",
                "Suspended",
                "Removed"
            ],
            "x-enum-varnames": [
                "UserStatusInvited",
                "UserStatusActive",
                "UserStatusSuspended",
                "UserStatusRemoved"
            ]
        },
        "models.BulkDeleteDto": {
            "type": "object",
            "required": [
                "ids"
            ],
            "properties": {
                "ids": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "models.BulkDeleteResponse": {
            "type": "object",
            "properties": {
                "deletedCount": {
                    "type": "integer",
                    "example": 1
                },
                "deletedIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "6835bf49c62fee1db6585e9f"
                    ]
                },
                "invalidIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "683467a32bf5a05aefe43cb"
                    ]
                },
                "message": {
                    "type": "string",
                    "example": "Roles deletion processed"
                },
                "notFoundIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "68344ada06017a47db237f66"
                    ]
                },
                "requestedIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "6835bf49c62fee1db6585e9f",
                        " 683467a32bf5a05aefe43cb",
                        " 68344ada06017a47db237f66"
                    ]
                }
            }
        },
        "models.BulkRestoreResponse": {
            "type": "object",
            "properties": {
                "invalidIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "683467a32bf5a05aefe43cb"
                    ]
                },
                "message": {
                    "type": "string",
                    "example": "Roles restoration processed"
                },
                "notFoundIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "68344ada06017a47db237f66"
                    ]
                },
                "requestedIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "6835bf49c62fee1db6585e9f",
                        " 683467a32bf5a05aefe43cb",
                        " 68344ada06017a47db237f66"
                    ]
                },
                "restoredCount": {
                    "type": "integer",
                    "example": 1
                },
                "restoredIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "6835bf49c62fee1db6585e9f"
                    ]
                }
            }
        },
        "models.SwaggerErrorResponse": {
            "description": "Error response model",
            "type": "object",
            "properties": {
                "data": {
                    "description": "Optional error details"
                },
                "errorMessage": {
                    "description": "Human-readable error message",
                    "type": "string",
                    "example": "Invalid request parameters"
                },
                "statusCode": {
                    "description": "HTTP status code",
                    "type": "integer",
                    "example": 400
                },
                "success": {
                    "description": "Indicates request failure",
                    "type": "boolean",
                    "example": false
                }
            }
        },
        "models.SwaggerStandardResponse": {
            "description": "Standard API response format",
            "type": "object",
            "properties": {
                "data": {
                    "description": "Response payload"
                },
                "errorMessage": {
                    "description": "Error message (only present if success is false)",
                    "type": "string",
                    "example": ""
                },
                "statusCode": {
                    "description": "HTTP status code",
                    "type": "integer",
                    "example": 200
                },
                "success": {
                    "description": "Indicates whether the request was successful",
                    "type": "boolean",
                    "example": true
                }
            }
        }
    },
    "securityDefinitions": {
        "BearerAuth": {
            "description": "Type \"Bearer\" followed by a space and JWT token",
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}